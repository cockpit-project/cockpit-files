#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/common/pywrap", sys.argv)
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/main/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import datetime
import os
import re
import shlex
import subprocess
import tempfile
from pathlib import Path
from typing import List, Optional

# import Cockpit's machinery for test VMs and its browser test API
import testlib


# Nondestructive tests all run in the same running VM. This allows them to run
# in Packit, Fedora, and RHEL dist-git gating They must not permanently change
# any file or configuration on the system in a way that influences other tests.
@testlib.nondestructive
class TestFiles(testlib.MachineCase):
    @classmethod
    def setUpClass(_cls) -> None:
        # Run browser in UTC as the displayed time is in the browser's timezone
        os.environ['TZ'] = 'UTC'

    def setUp(self) -> None:  # type: ignore[override]
        super().setUp()
        self.restore_dir("/home/admin")

    def enter_files(self) -> None:
        self.login_and_go("/files")
        self.browser.wait_text(".pf-v5-c-empty-state__title-text", "Directory is empty")

    def stat(self, fmt: str, path: str) -> str:
        return self.machine.execute(['stat', f'--format={fmt}', path]).strip()

    def assert_stat(self, fmt: str, path: str, expected: str) -> None:
        self.assertEqual(self.stat(fmt, path), expected)

    def assert_owner(self, path: str, owner: str) -> None:
        self.assert_stat('%U:%G', path, owner)

    def assert_last_breadcrumb(self, directory: str) -> None:
        if directory == '/':
            self.browser.wait_visible("a.pf-v5-c-breadcrumb__link.pf-m-current svg.breadcrumb-hdd-icon")
        else:
            self.browser.wait_text(".pf-v5-c-page__main-breadcrumb a.pf-m-current", directory)

    def delete_item(self, filetype: str, filename: str, *, expect_success: bool = True) -> None:
        b = self.browser
        b.click(f"[data-item='{filename}']")
        b.click("#dropdown-menu")
        b.click("#delete-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", f"Delete {filetype} {filename}?")
        b.click("button.pf-m-danger")
        if expect_success:
            b.wait_not_present(".pf-v5-c-modal-box")
            b.wait_not_present(f"[data-item='{filename}']")

    def create_directory(self, filename: str, owner: str | None = None, *, expect_success: bool = True) -> None:
        b = self.browser
        b.click("#dropdown-menu")
        b.click("#create-folder")
        b.set_input_text("#create-directory-input", f"{filename}")
        if owner:
            b.select_from_dropdown("#create-directory-owner", owner)
        b.click("button.pf-m-primary")
        if expect_success:
            b.wait_not_present(".pf-v5-c-modal-box")

    def wait_modal_inline_alert(self, msg: str) -> None:
        b = self.browser
        b.wait_in_text("h4.pf-v5-c-alert__title", msg)

    def rename_item(self, itemname: str, newname: str) -> None:
        b = self.browser
        b.click(f"[data-item='{itemname}']")
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Rename")
        b.set_input_text("#rename-item-input", f"{newname}")
        b.click("button.pf-m-primary")

    def waitDownloadFile(self, filename: str, expected_size: int | None = None, content: str | None = None) -> None:
        b = self.browser
        filepath = b.driver.download_dir / filename

        # Big downloads can take a while
        testlib.wait(filepath.exists, tries=120)
        if expected_size is not None:
            testlib.wait(lambda: filepath.stat().st_size == expected_size)

        if content is not None:
            self.assertEqual(filepath.read_text(), content)

    def file_action_modal(self, filename: str, action: str) -> None:
        b = self.browser
        b.click(f"[data-item='{filename}']")
        b.click("#dropdown-menu")
        b.click(f"#dropdown-menu + .pf-v5-c-menu button:contains('{action}')")

    def open_folder_context_menu(self) -> None:
        # With BiDi on Firefox a click is by default in the "middle" of the
        # element while we want to open the current folder context and a
        # "middle" click can be a file or folder item.
        self.browser.mouse("#files-card-parent", "contextmenu", 1, 1)

    def testBasic(self) -> None:
        b = self.browser
        m = self.machine

        self.enter_files()

        b.allow_download()
        # expected heading
        b.wait_visible(".header-toolbar")

        # empty directory with one hidden file
        m.execute("runuser -u admin mkdir /home/admin/empty")
        m.execute("runuser -u admin touch /home/admin/empty/.hiddenfile")
        b.mouse("[data-item='empty']", "dblclick")
        b.wait_text(".pf-v5-c-empty-state__title-text", "Directory is empty")
        b.wait_in_text(".pf-v5-c-empty-state__body", "1 item is hidden")
        b.assert_pixels(".pf-v5-c-page__main", "empty-folder-view")

        # Clicking `show hidden items` shows it
        b.click(".pf-v5-c-empty-state button:contains('Show hidden items')")
        b.wait_visible("[data-item='.hiddenfile']")

        # Reset global setting
        b.select_PF("#sort-menu-toggle", "Hide hidden items")
        b.wait_not_present("[data-item='.hiddenfile']")
        b.wait_text(".pf-v5-c-empty-state__title-text", "Directory is empty")

        # removing the empty file shows empty directory again
        m.execute("rm /home/admin/empty/.hiddenfile")
        b.wait_text(".pf-v5-c-empty-state__title-text", "Directory is empty")
        b.wait_not_in_text(".pf-v5-c-empty-state", "1 item is hidden")

        b.click("li[data-location='/home/admin'] a")  # go back to home dir
        m.execute("rm -r /home/admin/empty")
        b.wait_not_present("[data-item='empty']")

        # new files are auto-detected
        m.execute("touch --date @1641038400 /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")

        # new directories are auto-detected
        m.execute("mkdir /home/admin/newdir; touch --date @1641038400 /home/admin/newfile /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")

        # hidden files are not displayed
        m.execute("touch /home/admin/.hiddenfile /home/admin/not-hidden")
        b.wait_visible("[data-item='not-hidden']")
        b.wait_not_present("[data-item='.hiddenfile']")

        # Symlink to `.` and `..` work and get shown as directories
        m.execute("ln -sf . /home/admin/dot")
        b.wait_visible("[data-item='dot'].symlink.folder")
        m.execute("ln -sf .. /home/admin/dotdot")
        b.wait_visible("[data-item='dotdot'].symlink.folder")

        b.assert_pixels("#files-card-parent", "folder-view")

        # filtering works
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') > 1")
        b.set_input_text("input[placeholder='Filter directory']", "newfile")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') == 1")

        # no results when filtering
        b.set_input_text("input[placeholder='Filter directory']", "absolutelynothing")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') == 0")
        b.wait_text(".pf-v5-c-empty-state__title-text", "No matching results")

        # clear using empty-state
        b.click(".pf-v5-c-empty-state button:contains('Clear filter')")
        b.wait_text("input[placeholder='Filter directory']", "")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') != 0")

        # clear using input button
        b.set_input_text("input[placeholder='Filter directory']", "absolutelynothing")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') == 0")
        b.wait_text(".pf-v5-c-empty-state__title-text", "No matching results")

        b.click("input[aria-label='Search input']")
        b.wait_text("input[placeholder='Filter directory']", "")

        # filtering persists when changing view
        b.click("button[aria-label='Display as a list']")
        b.set_input_text("input[placeholder='Filter directory']", "newfile")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') == 1")
        b.set_input_text("input[placeholder='Filter directory']", "")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') > 1")

        # Big file downloads fine, runs in this test as running two downloads
        # in the same test causes issues with Chromium. This takes ~ 40 seconds.
        m.execute("truncate -s 1500M /home/admin/test.iso")
        b.wait_visible("[data-item='test.iso']")
        b.mouse("[data-item='test.iso']", "contextmenu")
        b.click(".contextMenu button:contains('Download')")
        self.waitDownloadFile("test.iso", 1500 * 1024 * 1024)

        # Selected view is saved in localStorage
        b.logout()
        self.login_and_go("/files")
        b.wait_visible("button[aria-label='Display as a grid']")

        # deleted files and directories are auto-detected
        m.execute("rmdir /home/admin/newdir")
        m.execute("rm /home/admin/newfile")
        b.wait_not_present("[data-item='newdir']")
        b.wait_not_present("[data-item='newfile']")

        # List root directory
        # Click "/" on the breadcrumb
        b.click("li[data-location='/'] a")  # go back to home dir
        b.wait_visible("[data-item='home']")

        # Enter /dev to make sure we can show special files properly
        b.mouse("[data-item='dev']", "dblclick")
        b.wait_visible("[data-item='urandom']")

        # Non-existing directory
        b.wait_visible("#dropdown-menu")
        b.go("/files#/?path=/doesnotexists")
        b.wait_in_text(".pf-v5-c-empty-state__body", "No such file or directory")
        b.wait_not_present("#dropdown-menu")

        # Path with multiple slashes is normalized
        b.go("/files#/?path=/////")
        b.wait_text("li[data-location='/']", "")

        # Path without a forward slash does get one
        b.go("/files#/?path=etc")
        b.wait_text("li[data-location='/etc']", "etc")

    def testPermissions(self) -> None:
        b = self.browser
        m = self.machine
        has_selinux = not any(img in m.image for img in ["arch", "debian", "ubuntu", "suse"])

        def select_access(access: str) -> None:
            b.select_from_dropdown("#edit-permissions-owner-access", access)
            b.select_from_dropdown("#edit-permissions-group-access", access)
            b.select_from_dropdown("#edit-permissions-other-access", access)

        def open_permissions_dialog(filename: str) -> None:
            b.wait_visible(f"[data-item='{filename}']")
            b.mouse(f"[data-item='{filename}']", "contextmenu")
            b.click(".contextMenu button:contains('Edit permissions')")
            b.wait_in_text(".pf-v5-c-modal-box__title-text", filename)

        def check_perms_match(filename: str, basedir: str) -> None:
            ls = m.execute(f"ls -l {basedir}/{filename}")[:10]
            # format ls output with spaces to match string in UI
            spaced_ls = f"{ls[1:4]} {ls[4:7]} {ls[7:10]}"
            b.wait_in_text(f"[data-item='{filename}'] .item-perms pre", spaced_ls)

        self.enter_files()

        b.click("button[aria-label='Display as a list']")

        # Check sidebar info
        m.execute("touch /home/admin/newfile")
        b.click("[data-item='newfile']")
        self.assertEqual(self.stat("%A", "/home/admin/newfile"), "-rw-r--r--")
        check_perms_match('newfile', '/home/admin')

        # Test changing owner/group
        m.execute("useradd testuser")

        for _ in range(0, 10):
            open_permissions_dialog('newfile')
            b.assert_pixels(".pf-v5-c-modal-box", "permissions-modal")
            b.click(".pf-v5-c-modal-box button.pf-m-link")
            b.wait_not_present(".pf-v5-c-modal-box")


if __name__ == '__main__':
    testlib.test_main()
