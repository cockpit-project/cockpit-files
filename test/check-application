#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/common/pywrap", sys.argv)
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/main/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os

# import Cockpit's machinery for test VMs and its browser test API
import testlib


# Nondestructive tests all run in the same running VM. This allows them to run
# in Packit, Fedora, and RHEL dist-git gating They must not permanently change
# any file or configuration on the system in a way that influences other tests.
@testlib.nondestructive
class TestFiles(testlib.MachineCase):
    @classmethod
    def setUpClass(_cls):
        # Run browser in UTC as the displayed time is in the browser's timezone
        os.environ['TZ'] = 'UTC'

    def setUp(self):
        super().setUp()
        self.restore_dir("/home/admin")

    def enter_files(self):
        self.login_and_go("/files")
        self.browser.wait_not_present(".pf-c-empty-state")

    # TODO: move to testlib.py
    def press_special_key(self, name):
        args = {"type": "keyDown", "key": name}
        self.browser.cdp.invoke("Input.dispatchKeyEvent", **args)

    def delete_item(self, b, filetype, filename, expect_success=True):
        b.click(f"[data-item='{filename}']")
        b.click("#dropdown-menu")
        b.click("#delete-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", f"Delete {filetype} {filename}?")
        b.click("button.pf-m-danger")
        if expect_success:
            b.wait_not_present(".pf-v5-c-modal-box")
            b.wait_not_present(f"[data-item='{filename}']")

    def create_directory(self, b, filename):
        b.click("#dropdown-menu")
        b.click("#create-item")
        b.set_input_text("#create-directory-input", f"{filename}")
        b.click("button.pf-m-primary")

    def wait_modal_inline_alert(self, b, msg):
        b.wait_in_text("h4.pf-v5-c-alert__title", msg)

    def rename_item(self, b, itemname, newname):
        b.click(f"[data-item='{itemname}']")
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Rename")
        b.set_input_text("#rename-item-input", f"{newname}")
        b.click("button.pf-m-primary")

    def waitDownloadFile(self, filename, expected_size=None, content=None):
        b = self.browser
        filepath = os.path.join(b.cdp.download_dir, filename)

        # Big downloads can take a while
        with b.wait_timeout(120):
            testlib.wait(lambda: os.path.exists(filepath))
        if expected_size is not None:
            testlib.wait(lambda: os.stat(filepath).st_size == expected_size)

        if content is not None:
            with open(filepath) as fp:
                self.assertEqual(fp.read(), content)

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.enter_files()
        b.allow_download()
        # expected heading
        b.wait_text("#files-card-header", "Directories & files")
        files_cnt = m.execute("ls -A /home/admin | wc -l").strip()
        hidden_files_cnt = m.execute(r'ls -A /home/admin | grep "^\." | wc -l').strip()
        b.wait_text("#sidebar-card-header", f"admin{files_cnt} items ({hidden_files_cnt} hidden)")

        # default directory is empty
        b.wait_text(".pf-v5-c-empty-state__body", "Directory is empty")

        # new files are auto-detected
        m.execute("touch --date @1641038400 /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")

        # new directories are auto-detected
        m.execute("mkdir /home/admin/newdir; touch --date @1641038400 /home/admin/newfile /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")

        # hidden files are not displayed
        m.execute("touch /home/admin/.hiddenfile /home/admin/not-hidden")
        b.wait_visible("[data-item='not-hidden']")
        b.wait_not_present("[data-item='.hiddenfile']")

        # file sidebar information
        b.click("[data-item='newfile']")
        b.wait_text("#sidebar-card-header", "newfileempty")
        b.wait_text("#description-list-owner dd", "root")
        b.wait_text("#description-list-group dd", "root")
        b.wait_text("#description-list-size dd", "0 B")
        b.wait_text("#description-list-last-modified dd", "Jan 1, 2022, 12:00 PM")

        # saving a file updates sidebar info
        # FIXME: Size does not update
        m.execute("head -c 7 /dev/zero > /home/admin/newfile")
        b.wait_text("#description-list-size dd", "7 B")
        b.wait_not_in_text("#description-list-last-modified ", "Jan 1, 2022, 12:00 PM")
        m.execute("touch --date @1641038400 /home/admin/newfile")
        b.wait_in_text("#description-list-last-modified ", "Jan 1, 2022, 12:00 PM")

        # clicking empty space resets sidebar
        b.click("#folder-view")
        b.wait_in_text("#sidebar-card-header", "admin")

        # folder information doesn't contain size
        b.click("[data-item='newdir']")
        b.wait_text("#sidebar-card-header", "newdirdirectory")
        b.wait_text("#description-list-owner dd", "root")
        b.wait_text("#description-list-group dd", "root")
        b.wait_not_present("#description-list-size")
        b.wait_text("#description-list-last-modified dd", "Jan 1, 2022, 12:00 PM")

        # filtering works
        self.browser.wait_js_cond("ph_count('#folder-view > .pf-v5-c-card') > 1")
        b.set_input_text("input[placeholder='Filter directory']", "newfile")
        self.browser.wait_js_cond("ph_count('#folder-view > .pf-v5-c-card') == 1")

        # filtering persists when changing view
        b.click("button[aria-label='Display as a list']")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') == 1")
        b.set_input_text("input[placeholder='Filter directory']", "")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') > 1")

        # Big file downloads fine, runs in this test as running two downloads
        # in the same test causes issues with Chromium. This takes ~ 40 seconds.
        m.execute("truncate -s 1500M /home/admin/test.iso")
        b.wait_visible("[data-item='test.iso']")
        b.mouse("[data-item='test.iso']", "contextmenu")
        b.click(".contextMenu button:contains('Download')")
        self.waitDownloadFile("test.iso", 1500 * 1024 * 1024)

        # Selected view is saved in localStorage
        b.logout()
        self.enter_files()
        b.wait_visible("button[aria-label='Display as a grid']")

        # deleted files and directories are auto-detected
        m.execute("rmdir /home/admin/newdir")
        m.execute("rm /home/admin/newfile")
        b.wait_not_present("[data-item='newdir']")
        b.wait_not_present("[data-item='newfile']")

        # current directory sidebar item count is updated
        files_cnt = m.execute("ls -A /home/admin | wc -l").strip()
        hidden_files_cnt = m.execute(r'ls -A /home/admin | grep "^\." | wc -l').strip()
        b.wait_text("#sidebar-card-header", f"admin{files_cnt} items ({hidden_files_cnt} hidden)")

        # sidebar is reset when files are removed
        b.wait_in_text("#sidebar-card-header", "admin")

        # List root directory
        # Click "/" on the breadcrumb
        b.click(".breadcrumb-button:nth-of-type(2)")
        b.wait_visible("[data-item='home']")

    def testNavigation(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        hostname = m.execute("hostname").strip()
        b.wait_text(".breadcrumb-button:nth-of-type(2)", hostname)
        b.wait_text(".breadcrumb-button:nth-of-type(3)", "home")
        b.wait_text(".breadcrumb-button:nth-of-type(4)", "admin")

        # clicking on the home button should take us to the home directory
        b.click(".breadcrumb-button:nth-of-type(3)")
        b.wait_visible(".breadcrumb-button:nth-of-type(3):disabled")
        b.wait_text(".breadcrumb-button:nth-of-type(3)", "home")
        b.wait_visible("[data-item='admin']")

        # show folder info in sidebar
        b.click("[data-item='admin']")
        b.wait_in_text("#sidebar-card-header", "admin")

        # double-clicking on a directory should take us into it
        b.mouse("[data-item='admin']", "dblclick")
        b.wait_not_present("[data-item='admin']")
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "admin")

        # navigating into a directory resets the sidebar
        b.wait_in_text("#sidebar-card-header", "admin")

        # double-clicking on a symlink to a directory also takes us into it
        m.execute("ln -s /tmp /home/admin/tmplink")
        b.click("[data-item='tmplink']")
        b.wait_in_text("#sidebar-card-header", "symbolic link to /tmp")
        b.mouse(".directory-item[data-item='tmplink']", "dblclick")
        b.wait_not_present("[data-item='tmplink']")
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "tmplink")
        b.go("/files#/?path=/home/admin")
        b.wait_not_present(".pf-v5-c-empty-state")

        # create folders and test navigation history buttons
        m.execute("mkdir /home/admin/newdir")
        m.execute("mkdir /home/admin/newdir/newdir2")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='admin']")
        b.wait_visible("[data-item='newdir2']")
        b.mouse("[data-item='newdir2']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        b.click(".breadcrumb-button:nth-of-type(3)")
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "home")
        b.wait_visible("[data-item='admin']")
        # navigate back
        b.eval_js("window.history.back()")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_not_present("[data-item='admin']")
        b.eval_js("window.history.back()")
        b.wait_in_text("#sidebar-card-header", "newdir")
        b.wait_visible("[data-item='newdir2']")
        b.eval_js("window.history.back()")
        b.wait_in_text("#sidebar-card-header", "admin")
        b.wait_visible("[data-item='newdir']")
        # navigate forward
        b.eval_js("window.history.forward()")
        b.wait_in_text("#sidebar-card-header", "newdir")
        b.wait_not_present("[data-item='admin']")
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "newdir")
        b.eval_js("window.history.forward()")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_not_present("[data-item='newdir']")
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "newdir2")
        b.eval_js("window.history.forward()")
        # Switching navigation resets selected state
        b.wait_visible("#card-item-admindir")
        b.wait_not_present("#card-item-admindir.pf-m-selected")
        b.wait_in_text("#sidebar-card-header", "home")
        b.wait_not_present("[data-item='newdir']")
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "home")
        b.wait_visible("[data-item='admin']")

        # Changing hostname updates breadcrumb
        self.restore_file("/etc/hostname")
        m.execute("hostnamectl set-hostname files")
        b.wait_text(".breadcrumb-button:nth-of-type(2)", "files")

        # Navigation via editing the path
        path_input = "#new-path-input"
        edit_button = ".breadcrumb-edit-button"
        apply_button = ".breadcrumb-edit-apply-button"
        cancel_button = ".breadcrumb-edit-cancel-button"

        # Cancel

        # Via escape
        b.click(edit_button)
        b.wait_val(path_input, "/home")
        b.set_input_text(path_input, "/home/admin")
        b.wait_visible(path_input)
        b.focus(path_input)
        self.press_special_key("Escape")
        b.wait_not_present(path_input)

        # Via cancel button
        b.click(edit_button)
        # Cancelled edit should not save the path
        b.wait_val(path_input, "/home")
        b.click(cancel_button)
        b.wait_not_present(path_input)

        # Change path

        # Via Enter key
        b.click(edit_button)
        b.set_input_text(path_input, "/opt")
        b.focus(path_input)
        self.press_special_key("Enter")
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "opt")

        # Via apply button
        b.click(edit_button)
        b.set_input_text(path_input, "/var")
        b.click(apply_button)
        b.wait_text(".pf-v5-c-page__main-breadcrumb > div > button:last-of-type", "var")

        # Editing and cancelling does not remember input
        b.click(edit_button)
        b.set_input_text(path_input, "/path/to/nowhere")
        b.click(cancel_button)
        b.wait_not_present(path_input)
        b.click(edit_button)
        b.wait_visible(path_input)
        b.wait_val(path_input, "/var")

    def testSorting(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        # Expected heading
        b.wait_text("#files-card-header", "Directories & files")

        # Create test files and folders
        m.execute("touch -d '3 hours ago' /home/admin/aaa")
        b.wait_visible("[data-item='aaa']")
        m.execute("touch -d '4 hours ago' /home/admin/BBB")
        b.wait_visible("[data-item='BBB']")
        m.execute("touch -d '2 hours ago' /home/admin/ccc")
        b.wait_visible("[data-item='ccc']")

        # Default sort is A-Z
        # Alphabet sorts should be case insensetive
        b.wait_text(".item-button:nth-of-type(1)", "aaa")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "ccc")

        # Sort by reverse alphabet
        b.select_PF5("#sort-menu-toggle", "#sort-menu", "Z-A")
        # Alphabet sorts should be case insensetive
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

        # Sort by last modified
        b.select_PF5("#sort-menu-toggle", "#sort-menu", "Last modified")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "aaa")
        b.wait_text(".item-button:nth-of-type(3)", "BBB")

        # Update content of files
        m.execute('echo "update" > /home/admin/aaa')

        b.wait_text(".item-button:nth-of-type(1)", "aaa")
        b.wait_text(".item-button:nth-of-type(2)", "ccc")
        b.wait_text(".item-button:nth-of-type(3)", "BBB")

        # Sort by first modified
        b.select_PF5("#sort-menu-toggle", "#sort-menu", "First modified")
        b.wait_text(".item-button:nth-of-type(1)", "BBB")
        b.wait_text(".item-button:nth-of-type(2)", "ccc")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

        # Sort option should be saved in localStorage
        b.select_PF5("#sort-menu-toggle", "#sort-menu", "Z-A")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")
        b.reload()
        b.enter_page("/files")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

        m.execute("""
            ln -s /tmp /home/admin/ddd
            mkdir /home/admin/eee
            mkdir /home/admin/Eee
        """)
        b.wait_visible("[data-item='ddd']")
        b.wait_visible("[data-item='eee']")
        b.wait_visible("[data-item='Eee']")

        # Directories are sorted first
        b.select_PF5("#sort-menu-toggle", "#sort-menu", "A-Z")
        b.wait_text(".item-button:nth-of-type(1)", "ddd")
        b.wait_text(".item-button:nth-of-type(2)", "eee")
        b.wait_text(".item-button:nth-of-type(3)", "Eee")
        b.wait_text(".item-button:nth-of-type(4)", "aaa")
        b.wait_text(".item-button:nth-of-type(5)", "BBB")
        b.wait_text(".item-button:nth-of-type(6)", "ccc")

    def testDelete(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        self.allow_journal_messages("rm: cannot remove '/home/admin/newdir/newfile': Permission denied",
                                    "rm: cannot remove '/home/admin/newfile': Operation not permitted")

        # Delete file
        m.execute("touch /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")
        self.delete_item(b, "file", "newfile")

        # Delete file with space in the file name
        m.execute(r"touch /home/admin/new\ file")
        b.wait_visible("[data-item='new file']")
        self.delete_item(b, "file", "new file")

        # Delete empty directory
        m.execute("mkdir /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")
        self.delete_item(b, "directory", "newdir")

        # Delete full directory
        m.execute("mkdir /home/admin/newdir")
        m.execute("touch /home/admin/newdir/newfile")
        b.wait_visible("[data-item='newdir']")
        self.delete_item(b, "directory", "newdir")

        # Delete symlink
        m.execute("""
        touch /home/admin/target
        ln -s /home/admin/target /home/admin/link
        """)
        self.delete_item(b, "link", "link")

        # Deleting protected file should give an error
        m.execute("touch /home/admin/newfile")
        m.execute("sudo chattr +i /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")
        self.delete_item(b, "file", "newfile", expect_success=False)
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Force delete file newfile?")
        self.wait_modal_inline_alert(b, "rm: cannot remove '/home/admin/newfile': Operation not permitted")
        b.click("button.pf-m-danger")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Force delete file newfile?")
        self.wait_modal_inline_alert(b, "rm: cannot remove '/home/admin/newfile': Operation not permitted")
        b.click("div.pf-v5-c-modal-box__close button")
        b.wait_not_present(".pf-v5-c-modal-box")
        b.wait_visible("[data-item='newfile']")
        m.execute("sudo chattr -i /home/admin/newfile")
        self.delete_item(b, "file", "newfile")

        # Delete using keyboard shortcut
        m.execute("touch /home/admin/delete1 /home/admin/delete2")
        b.click("[data-item='delete1']")
        b.mouse("[data-item='delete2']", "click", ctrlKey=True)
        b.wait_visible("[data-item='delete1'].pf-m-selected")
        b.wait_visible("[data-item='delete2'].pf-m-selected")
        self.press_special_key("Delete")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Delete 2 items?")
        b.click("button.pf-m-danger")

        b.wait_not_present(".pf-v5-c-modal-box")
        b.wait_not_present("[data-item='delete1']")
        b.wait_not_present("[data-item='delete2']")

    def testCreate(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        # Create folder
        self.create_directory(b, "newdir")
        b.wait_visible("[data-item='newdir']")

        # validation
        b.click("#dropdown-menu")
        b.click("#create-item")
        b.set_input_text("#create-directory-input", "test")
        b.set_input_text("#create-directory-input", "")
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#create-directory-input-helper", "Directory name cannot be empty.")

        b.set_input_text("#create-directory-input", "a" * 256)
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#create-directory-input-helper", "Directory name too long.")

        b.set_input_text("#create-directory-input", "foo/bar")
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#create-directory-input-helper", "Directory name cannot include a /.")

        b.set_input_text("#create-directory-input", "test")
        b.wait_visible("button.pf-m-primary:not(:disabled)")
        b.click(".pf-v5-c-modal-box__footer button.pf-m-link")  # cancel

        # Creating folder with duplicate name should return an error
        self.create_directory(b, "newdir")
        self.wait_modal_inline_alert(b, "mkdir: cannot create directory ‘/home/admin/newdir’: File exists")
        b.click("div.pf-v5-c-modal-box__close button.pf-v5-c-button")

        # Creating folder with empty name should return an error
        self.create_directory(b, "")
        self.wait_modal_inline_alert(b, "mkdir: cannot create directory ‘/home/admin/’: File exists")
        b.click("div.pf-v5-c-modal-box__close button.pf-v5-c-button")

        # Creating folder inside protected folder should return an error
        m.execute("sudo chattr +i /home/admin/newdir")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        self.create_directory(b, "test")
        alert_text = "mkdir: cannot create directory ‘/home/admin/newdir/test’: Operation not permitted"
        self.wait_modal_inline_alert(b, alert_text)
        b.click("div.pf-v5-c-modal-box__close button.pf-v5-c-button")
        b.click(".breadcrumb-button:nth-of-type(3)")
        m.execute("sudo chattr -i /home/admin/newdir")

    def testContextMenu(self):
        b = self.browser
        m = self.machine

        self.enter_files()
        b.allow_download()

        # Create folder from context menu
        b.mouse("#folder-view", "contextmenu")
        b.click(".contextMenu button:contains('Create directory')")
        b.set_input_text("#create-directory-input", "newdir")
        b.click("button.pf-m-primary")
        b.wait_visible("[data-item='newdir']")

        # Opening context menu from empty space deselects item
        b.click("[data-item='newdir']")
        b.mouse("#folder-view", "contextmenu")
        b.click(".contextMenu button:contains('Create directory')")
        b.set_input_text("#create-directory-input", "newdir2")
        b.click("button.pf-m-primary")
        b.wait_visible("[data-item='newdir2']")
        m.execute("rmdir /home/admin/newdir2")

        # Rename folder from context menu
        b.mouse("[data-item='newdir']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(5) button", "Rename")
        b.click(".contextMenu button:contains('Rename')")
        b.set_input_text("#rename-item-input", "newdir1")
        b.click("button.pf-m-primary")
        b.wait_visible("[data-item='newdir1']")

        # Edit permissions from context menu
        m.execute("useradd testuser")
        b.click("[data-item='newdir1']")
        b.mouse("[data-item='newdir1']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(4) button", "Edit permissions")
        b.click(".contextMenu button:contains('Edit permissions')")
        b.select_from_dropdown("#edit-permissions-owner", "testuser")
        b.click("button.pf-m-primary")
        b.wait_text("#description-list-owner dd", "testuser")

        # Delete folder from context menu
        b.mouse("[data-item='newdir1']", "contextmenu")
        b.click(".contextMenu button:contains('Delete')")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='newdir1']")

        m.execute("echo 'some content' > /home/admin/newfile")
        b.mouse("[data-item='newfile']", "contextmenu")
        b.click(".contextMenu button:contains('Download')")
        size = int(m.execute("stat --format '%s' /home/admin/newfile").strip())
        self.waitDownloadFile("newfile", size, "some content\n")

        # Delete button text should match item type: directory/file
        b.mouse("[data-item='newfile']", "contextmenu")
        b.click(".contextMenu button:contains('Delete')")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='newfile']")

        # The list view also supports a contextmenu
        m.execute("touch /home/admin/testfile")
        b.click("button[aria-label='Display as a list']")
        b.mouse("[data-item='testfile']", "contextmenu")
        b.wait_visible(".contextMenu button:contains('Delete')")

    def testDownload(self):
        b = self.browser
        m = self.machine

        self.enter_files()
        b.allow_download()

        # Big file downloads fine
        m.execute("truncate -s 1500M /home/admin/test.iso")
        b.wait_visible("[data-item='test.iso']")
        b.mouse("[data-item='test.iso']", "contextmenu")
        b.click(".contextMenu button:contains('Download')")
        self.waitDownloadFile("test.iso", 1500 * 1024 * 1024)

    def testRename(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        # validation
        m.execute("touch /home/admin/newfile")
        b.click("[data-item='newfile']")
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.set_input_text("#rename-item-input", "test")
        b.set_input_text("#rename-item-input", "")
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#rename-item-input-helper", "Directory name cannot be empty.")

        b.set_input_text("#rename-item-input", "a" * 256)
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#rename-item-input-helper", "Directory name too long.")

        b.set_input_text("#rename-item-input", "foo/bar")
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#rename-item-input-helper", "Directory name cannot include a /.")

        b.set_input_text("#rename-item-input", "test")
        b.wait_visible("button.pf-m-primary:not(:disabled)")
        b.click(".pf-v5-c-modal-box__footer button.pf-m-link")  # cancel

        # Rename file
        self.rename_item(b, "newfile", "newfile1")
        b.wait_visible("[data-item='newfile1']")
        m.execute("rm /home/admin/newfile1")

        # Rename directory
        m.execute("mkdir /home/admin/newdir")
        self.rename_item(b, "newdir", "newdir1")
        b.wait_visible("[data-item='newdir1']")

        # Rename with space
        self.rename_item(b, "newdir1", "new dir1")
        b.wait_visible("[data-item='new dir1']")

        # Rename to an existing directory should not move the file into the directory
        m.execute("""
        touch /home/admin/newfile
        mkdir /home/admin/dest
        """)
        b.wait_visible("[data-item='newfile']")
        b.wait_visible("[data-item='dest']")
        self.rename_item(b, "newfile", "dest")
        self.wait_modal_inline_alert(b, "mv: cannot overwrite directory '/home/admin/dest' with non-directory")
        b.click("button.pf-m-link:contains('Cancel')")
        b.wait_not_present(".pf-v5-c-modal-box")

        # Renaming protected item should give an error
        m.execute("sudo chattr +i /home/admin/new\\ dir1")
        self.rename_item(b, "new dir1", "testdir")
        alert_text = "mv: cannot move '/home/admin/new dir1' to '/home/admin/testdir': Operation not permitted"
        self.wait_modal_inline_alert(b, alert_text)
        b.click("div.pf-v5-c-modal-box__close")
        m.execute("sudo chattr -i /home/admin/new\\ dir1")

    def testHiddenItems(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        # Check hidden item count
        m.execute("mkdir /home/admin/newdir")
        m.execute("touch /home/admin/newdir/f1 /home/admin/newdir/.f2")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_visible("[data-item='f1']")
        b.wait_not_present("[data-item='.f2']")
        b.wait_in_text("#sidebar-card-header", "2 items (1 hidden)")

        # Show hidden items
        b.click("#global-settings-menu")
        b.click("#show-hidden-items")
        b.wait_visible("[data-item='f1']")
        b.wait_visible("[data-item='.f2']")
        b.wait_in_text("#sidebar-card-header", "2 items")

        # Selected option is saved in localStorage
        b.reload()
        b.enter_page("/files")
        b.wait_visible("[data-item='f1']")
        b.wait_visible("[data-item='.f2']")

    def testPermissions(self):
        b = self.browser
        m = self.machine

        def wait_permissions(permission):
            b.wait_text("#description-list-owner-permissions dd", permission)
            b.wait_text("#description-list-group-permissions dd", permission)
            b.wait_text("#description-list-other-permissions dd", permission)

        def select_access(access):
            b.select_from_dropdown("#edit-permissions-owner-access", access)
            b.select_from_dropdown("#edit-permissions-group-access", access)
            b.select_from_dropdown("#edit-permissions-other-access", access)

        self.enter_files()

        # Check sidebar info
        m.execute("touch /home/admin/newfile")
        b.click("[data-item='newfile']")
        self.assertEqual(m.execute("ls -l /home/admin/newfile")[:10], "-rw-r--r--")
        b.wait_text("#description-list-owner-permissions dd", "Read and write")
        b.wait_text("#description-list-group-permissions dd", "Read-only")
        b.wait_text("#description-list-other-permissions dd", "Read-only")

        # Test changing owner/group
        m.execute("useradd testuser")
        b.click("button:contains('Edit permissions')")
        # Changing owner should change group if user is not in the group
        b.select_from_dropdown("#edit-permissions-owner", "testuser")
        b.wait_in_text("#edit-permissions-group", "testuser")
        b.click("button.pf-m-primary")
        b.wait_text("#description-list-owner dd", "testuser")
        b.wait_text("#description-list-group dd", "testuser")

        m.execute("usermod -a -G testuser admin")
        b.click("button:contains('Edit permissions')")
        # Changing owner shouldn't change group if user is in the group
        b.select_from_dropdown("#edit-permissions-owner", "admin")
        b.wait_in_text("#edit-permissions-group", "testuser")
        b.click("button.pf-m-primary")
        b.wait_text("#description-list-owner dd", "admin")
        b.wait_text("#description-list-group dd", "testuser")

        # Test changing permissions
        b.click("button:contains('Edit permissions')")
        select_access("0")
        b.click("button.pf-m-primary")
        self.assertEqual(m.execute("ls -l /home/admin/newfile")[:10], "----------")
        wait_permissions("None")

        b.click("button:contains('Edit permissions')")
        select_access("7")
        b.click("button.pf-m-primary")
        self.assertEqual(m.execute("ls -l /home/admin/newfile")[:10], "-rwxrwxrwx")
        wait_permissions("Read, write and execute")

        # Test changing CWD permissions
        test_dir = "/home/admin/testdir"
        m.execute(['runuser', '-u', 'admin', 'mkdir', test_dir])
        b.wait_visible("[data-item='testdir']")
        b.mouse("[data-item='testdir']", "dblclick")
        b.wait_not_present(".pf-v5-c-empty-state")

        # Via contextmenu
        b.mouse("#folder-view", "contextmenu")
        b.click(".contextMenu button:contains('Edit permissions')")
        b.wait_in_text(".pf-v5-c-modal-box__title-text", "testdir")
        b.select_from_dropdown("#edit-permissions-owner-access", "6")
        b.select_from_dropdown("#edit-permissions-group-access", "4")
        b.select_from_dropdown("#edit-permissions-other-access", "4")
        b.click("button.pf-m-primary")
        b.wait_not_present(".pf-v5-c-modal-box")

        self.assertEqual(m.execute(f"ls -ld {test_dir}")[:10], "drw-r--r--")

        # Via kebab
        b.click("#dropdown-menu")
        b.click("button:contains('Edit permissions')")
        b.wait_in_text(".pf-v5-c-modal-box__title-text", "testdir")
        b.select_from_dropdown("#edit-permissions-owner-access", "7")
        b.select_from_dropdown("#edit-permissions-group-access", "5")
        b.select_from_dropdown("#edit-permissions-other-access", "5")
        b.click("button.pf-m-primary")
        b.wait_not_present(".pf-v5-c-modal-box")

        self.assertEqual(m.execute(f"ls -ld {test_dir}")[:10], "drwxr-xr-x")

        b.go("/files#/?path=/")
        b.wait_not_present(".pf-v5-c-empty-state")

        # Shows root user owns "bin"
        b.click("[data-item='bin']")
        b.click("#dropdown-menu")
        b.click("#edit-permissions")
        b.wait_in_text(".pf-v5-c-modal-box__title-text", "bin")
        b.wait_in_text("#edit-permissions-owner", "root")
        b.wait_in_text("#edit-permissions-group", "root")

        # As normal user you cannot change user/group permissions
        b.drop_superuser()

        b.go("/files#/?path=/home/admin")
        b.wait_not_present(".pf-v5-c-empty-state")

        m.execute("touch /home/admin/adminfile; chown admin: /home/admin/adminfile")
        b.click("[data-item='adminfile']")
        b.click("button:contains('Edit permissions')")
        select_access("7")
        # A user cannot change ownership
        b.wait_not_in_text(".pf-v5-c-modal-box__body", "Ownership")
        b.click("button.pf-m-primary")
        self.assertEqual(m.execute("ls -l /home/admin/adminfile")[:10], "-rwxrwxrwx")
        wait_permissions("Read, write and execute")
        # Does not change ownership
        b.wait_text("#description-list-owner dd", "admin")
        b.wait_text("#description-list-group dd", "admin")

        # Cannot change permission of /home
        b.click(".breadcrumb-button:nth-of-type(2)")
        b.click("[data-item='home']")
        b.click("button:contains('Edit permissions')")
        select_access("7")
        b.click("button.pf-m-primary")
        self.wait_modal_inline_alert(b, "chmod: changing permissions of '/home': Operation not permitted")
        b.click("button.pf-m-link")
        b.wait_not_present(".pf-v5-c-modal-box")

    def testErrors(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        m.execute("mkdir /home/admin/testdir && chmod 400 /home/admin/testdir")
        b.mouse("[data-item='testdir']", "dblclick")
        b.wait_not_present(".pf-v5-c-empty-state")
        b.drop_superuser()
        b.wait_in_text(".pf-v5-c-empty-state", "Permission denied")

    def testMultiSelect(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        # Check control-clicking
        m.execute("touch /home/admin/file1 && touch /home/admin/file2")
        b.click("[data-item='file1']")
        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file1'].pf-m-selected")
        b.wait_visible("[data-item='file2'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "admin2 items selected")

        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file1'].pf-m-selected")
        b.wait_not_present("[data-item='file2'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "file1empty")

        b.mouse("[data-item='file1']", "click", ctrlKey=True)
        b.wait_not_present("[data-item='file1'].pf-m-selected")
        b.wait_in_text("#sidebar-card-header", "admin")

        # Control-clicking when nothing is selected should select item normally
        b.mouse("[data-item='file1']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file1'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "file1empty")

        # Check context menu
        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file2'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "admin2 items selected")
        b.mouse("[data-item='file1']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(2) button", "Delete")
        b.click(".contextMenu button:contains('Delete')")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Delete 2 items?")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='file1']")
        b.wait_not_present("[data-item='file2']")

        # Check sidebar menu
        m.execute("touch /home/admin/file1 && touch /home/admin/file2")
        b.click("[data-item='file1']")
        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.click("#dropdown-menu")
        b.click("#delete-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Delete 2 items?")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='file1']")
        b.wait_not_present("[data-item='file2']")

    def testKeyboardNav(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        create_files = ""
        for i in range(0, 4):
            create_files += f"touch /home/admin/file{i}; "
        m.execute(create_files)

        # Focus the iframe for global keybindings in Files.
        b.eval_js("window.focus()")

        b.click("[data-item='file0']")
        b.wait_visible("[data-item='file0'].pf-m-selected")

        self.press_special_key("ArrowRight")
        b.wait_visible("[data-item='file1'].pf-m-selected")
        self.press_special_key("ArrowLeft")
        b.wait_visible("[data-item='file0'].pf-m-selected")

        # Up / Down depends on the layout, this is tested on mobile where the
        # width is two cards.
        b.set_layout("mobile")
        b.click("[data-item='file0']")
        b.wait_visible("[data-item='file0'].pf-m-selected")

        self.press_special_key("ArrowDown")
        b.wait_visible("[data-item='file2'].pf-m-selected")
        self.press_special_key("ArrowUp")
        b.wait_visible("[data-item='file0'].pf-m-selected")

        m.execute("mkdir /home/admin/foo")
        b.click("[data-item='foo']")

        b.wait_visible("[data-item='foo'].pf-m-selected")
        self.press_special_key("Enter")
        b.wait_text(".breadcrumb-button:nth-of-type(5)", "foo")

    def testCopyPaste(self):
        b = self.browser
        m = self.machine

        self.enter_files()

        # Copy/paste file
        m.execute("""
            runuser -u admin mkdir /home/admin/newdir
            runuser -u admin echo "test_text" > /home/admin/newfile
        """)
        b.click("[data-item='newfile']")
        b.click("#dropdown-menu")
        b.click("#copy-item")
        b.mouse("[data-item='newdir']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#paste-item")
        b.wait_visible("[data-item='newfile']")
        self.assertEqual(m.execute("head -n 1 /home/admin/newdir/newfile"), "test_text\n")
        b.click(".breadcrumb-button:nth-of-type(4)")

        # Copy/paste directory
        self.browser.wait_not_present(".pf-c-empty-state")
        m.execute("runuser -u admin mkdir /home/admin/copyDir")
        b.click("[data-item='newfile']")
        b.click("#dropdown-menu")
        b.click("#copy-item")
        b.mouse("[data-item='newdir']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#paste-item")
        b.wait_visible("[data-item='newfile']")
        self.assertEqual(m.execute("head -n 1 /home/admin/newdir/newfile"), "test_text\n")
        b.click(".breadcrumb-button:nth-of-type(4)")

        # Paste into directory
        self.browser.wait_not_present(".pf-c-empty-state")
        m.execute("runuser -u admin touch /home/admin/newfile2")
        b.click("[data-item='newfile2']")
        b.click("#dropdown-menu")
        b.click("#copy-item")
        b.click("[data-item='newdir']")
        b.click("#dropdown-menu")
        b.click("#paste-into-directory")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_visible("[data-item='newfile2']")
        b.click(".breadcrumb-button:nth-of-type(3)")


if __name__ == '__main__':
    testlib.test_main()
