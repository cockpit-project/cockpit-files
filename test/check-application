#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/common/pywrap", sys.argv)
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/main/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os

# import Cockpit's machinery for test VMs and its browser test API
import testlib


# Nondestructive tests all run in the same running VM. This allows them to run
# in Packit, Fedora, and RHEL dist-git gating They must not permanently change
# any file or configuration on the system in a way that influences other tests.
@testlib.nondestructive
class TestNavigator(testlib.MachineCase):
    @classmethod
    def setUpClass(cls):
        # Run browser in UTC as the displayed time is in the browser's timezone
        os.environ['TZ'] = 'UTC'

    def setUp(self):
        super().setUp()
        self.restore_dir("/home/admin")

    def enter_navigator(self):
        self.login_and_go("/navigator")
        self.browser.wait_not_present(".pf-c-empty-state")

    # FIXME: Move to testlib.py
    def select_PF5(self, b, selector_button: str, selector: str, value):
        b.click(f"{selector_button}:not([disabled]):not([aria-disabled=true])")
        select_entry = f"{selector} ul button:contains('{value}')"
        b.click(select_entry)

    def delete_item(self, b, filetype, filename, expect_success=True):
        b.click(f"[data-item='{filename}']")
        b.click("#dropdown-menu")
        b.click("#delete-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", f"Delete {filetype} {filename}?")
        b.click("button.pf-m-danger")
        if expect_success:
            b.wait_not_present(".pf-v5-c-modal-box")
            b.wait_not_present(f"[data-item='{filename}']")

    def create_directory(self, b, filename):
        b.click("#dropdown-menu")
        b.click("#create-item")
        b.set_input_text("#create-directory-input", f"{filename}")
        b.click("button.pf-m-primary")

    def wait_modal_inline_alert(self, b, msg):
        b.wait_in_text("h4.pf-v5-c-alert__title", msg)

    def rename_item(self, b, itemname, newname):
        b.click(f"[data-item='{itemname}']")
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Rename")
        b.set_input_text("#rename-item-input", f"{newname}")
        b.click("button.pf-m-primary")

    def create_link(self, b, original, new, filetype, index):
        b.click("#dropdown-menu")
        b.click("#create-link")
        b.focus("#create-link-original-wrapper input")
        b.click("#create-link-original-wrapper input")
        # Filter out hidden items
        b.key_press([original[0]])
        b.wait_in_text(f"#create-link-original li:nth-of-type({index}) button", original)
        b.click(f"#create-link-original li:nth-of-type({index}) button")
        b.set_input_text("#create-link-new", new)
        b.click(f"#create-link-{filetype}")
        b.click("button.pf-m-primary")

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()
        # expected heading
        b.wait_text("#navigator-card-header", "Directories & files")
        files_cnt = m.execute("ls -A /home/admin | wc -l").strip()
        hidden_files_cnt = m.execute(r'ls -A /home/admin | grep "^\." | wc -l').strip()
        b.wait_text("#sidebar-card-header", f"admin{files_cnt} items ({hidden_files_cnt} hidden)")

        # new files are auto-detected
        m.execute("touch --date @1641038400 /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")

        # new directories are auto-detected
        m.execute("mkdir /home/admin/newdir; touch --date @1641038400 /home/admin/newfile /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")

        # hidden files are not displayed
        m.execute("touch /home/admin/.hiddenfile /home/admin/not-hidden")
        b.wait_visible("[data-item='not-hidden']")
        b.wait_not_present("[data-item='.hiddenfile']")

        # file sidebar information
        b.click("[data-item='newfile']")
        b.wait_text("#sidebar-card-header", "newfileempty")
        b.wait_text("#description-list-owner dd", "root")
        b.wait_text("#description-list-group dd", "root")
        b.wait_text("#description-list-size dd", "0 B")
        b.wait_text("#description-list-last-modified dd", "Jan 1, 2022, 12:00 PM")

        # saving a file updates sidebar info
        # FIXME: Size does not update
        m.execute("head -c 7 /dev/zero > /home/admin/newfile")
        b.wait_text("#description-list-size dd", "7 B")
        b.wait_not_in_text("#description-list-last-modified ", "Jan 1, 2022, 12:00 PM")
        m.execute("touch --date @1641038400 /home/admin/newfile")
        b.wait_in_text("#description-list-last-modified ", "Jan 1, 2022, 12:00 PM")

        # clicking empty space resets sidebar
        b.click("#folder-view")
        b.wait_in_text("#sidebar-card-header", "admin")

        # folder information doesn't contain size
        b.click("[data-item='newdir']")
        b.wait_text("#sidebar-card-header", "newdirdirectory")
        b.wait_text("#description-list-owner dd", "root")
        b.wait_text("#description-list-group dd", "root")
        b.wait_not_present("#description-list-size")
        b.wait_text("#description-list-last-modified dd", "Jan 1, 2022, 12:00 PM")

        # filtering works
        self.browser.wait_js_cond("ph_count('#folder-view > .pf-v5-c-card') > 1")
        b.set_input_text("input[placeholder='Filter directory']", "newfile")
        self.browser.wait_js_cond("ph_count('#folder-view > .pf-v5-c-card') == 1")

        # filtering persists when changing view
        b.click("button[aria-label='Display as a list']")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') == 1")
        b.set_input_text("input[placeholder='Filter directory']", "")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') > 1")

        # deleted files and directories are auto-detected
        m.execute("rmdir /home/admin/newdir")
        m.execute("rm /home/admin/newfile")
        b.wait_not_present("[data-item='newdir']")
        b.wait_not_present("[data-item='newfile']")

        # current directory sidebar item count is updated
        files_cnt = m.execute("ls -A /home/admin | wc -l").strip()
        hidden_files_cnt = m.execute(r'ls -A /home/admin | grep "^\." | wc -l').strip()
        b.wait_text("#sidebar-card-header", f"admin{files_cnt} items ({hidden_files_cnt} hidden)")

        # sidebar is reset when files are removed
        b.wait_in_text("#sidebar-card-header", "admin")

        # List root directory
        # Click "/" on the breadcrumb
        b.click(".breadcrumb-button:nth-of-type(1)")
        b.wait_visible("[data-item='home']")

    def testNavigation(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        b.wait_text(".breadcrumb-button:nth-of-type(1)", "/")
        b.wait_text(".breadcrumb-button:nth-of-type(2)", "home")
        b.wait_text(".last-breadcrumb-button", "admin")

        # clicking on the home button should take us to the home directory
        b.click(".breadcrumb-button:nth-of-type(2)")
        b.wait_not_present(".breadcrumb-button:nth-of-type(2)")
        b.wait_text(".last-breadcrumb-button", "home")
        b.wait_visible("[data-item='admin']")

        # show folder info in sidebar
        b.click("[data-item='admin']")
        b.wait_in_text("#sidebar-card-header", "admin")

        # double-clicking on a directory should take us into it
        b.mouse("[data-item='admin']", "dblclick")
        b.wait_not_present("[data-item='admin']")
        b.wait_text(".last-breadcrumb-button", "admin")

        # navigating into a directory resets the sidebar
        b.wait_in_text("#sidebar-card-header", "admin")

        # create folders and test navigation history buttons
        m.execute("mkdir /home/admin/newdir")
        m.execute("mkdir /home/admin/newdir/newdir2")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='admin']")
        b.wait_visible("[data-item='newdir2']")
        b.mouse("[data-item='newdir2']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        b.click(".breadcrumb-button:nth-of-type(2)")
        b.wait_text(".last-breadcrumb-button", "home")
        b.wait_visible("[data-item='admin']")
        # navigate back
        b.eval_js("window.history.back()")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_not_present("[data-item='admin']")
        b.eval_js("window.history.back()")
        b.wait_in_text("#sidebar-card-header", "newdir")
        b.wait_visible("[data-item='newdir2']")
        b.eval_js("window.history.back()")
        b.wait_in_text("#sidebar-card-header", "admin")
        b.wait_visible("[data-item='newdir']")
        # navigate forward
        b.eval_js("window.history.forward()")
        b.wait_in_text("#sidebar-card-header", "newdir")
        b.wait_not_present("[data-item='admin']")
        b.wait_text(".last-breadcrumb-button", "newdir")
        b.eval_js("window.history.forward()")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_not_present("[data-item='newdir']")
        b.wait_text(".last-breadcrumb-button", "newdir2")
        b.eval_js("window.history.forward()")
        b.click("#navigator-card-body")  # unselect
        b.wait_in_text("#sidebar-card-header", "home")
        b.wait_not_present("[data-item='newdir']")
        b.wait_text(".last-breadcrumb-button", "home")
        b.wait_visible("[data-item='admin']")

    def testSorting(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        # Expected heading
        b.wait_text("#navigator-card-header", "Directories & files")

        # Create test files and folders
        m.execute("touch -d '3 hours ago' /home/admin/aaa")
        b.wait_visible("[data-item='aaa']")
        m.execute("touch -d '4 hours ago' /home/admin/BBB")
        b.wait_visible("[data-item='BBB']")
        m.execute("touch -d '2 hours ago' /home/admin/ccc")
        b.wait_visible("[data-item='ccc']")

        # Default sort is A-Z
        # Alphabet sorts should be case insensetive
        b.wait_text(".item-button:nth-of-type(1)", "aaa")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "ccc")

        # Sort by reverse alphabet
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "Z-A")
        # Alphabet sorts should be case insensetive
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

        # Sort by last modified
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "Last modified")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "aaa")
        b.wait_text(".item-button:nth-of-type(3)", "BBB")

        # Update content of files
        m.execute('echo "update" > /home/admin/aaa')

        b.wait_text(".item-button:nth-of-type(1)", "aaa")
        b.wait_text(".item-button:nth-of-type(2)", "ccc")
        b.wait_text(".item-button:nth-of-type(3)", "BBB")

        # Sort by first modified
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "First modified")
        b.wait_text(".item-button:nth-of-type(1)", "BBB")
        b.wait_text(".item-button:nth-of-type(2)", "ccc")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

        # Sort option should be saved in localStorage
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "Z-A")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")
        b.reload()
        b.enter_page("/navigator")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

    def testDelete(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        self.allow_journal_messages("rm: cannot remove '/home/admin/newdir/newfile': Permission denied",
                                    "rm: cannot remove '/home/admin/newfile': Operation not permitted")

        # Delete file
        m.execute("touch /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")
        self.delete_item(b, "file", "newfile")

        # Delete file with space in the file name
        m.execute(r"touch /home/admin/new\ file")
        b.wait_visible("[data-item='new file']")
        self.delete_item(b, "file", "new file")

        # Delete empty directory
        m.execute("mkdir /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")
        self.delete_item(b, "directory", "newdir")

        # Delete full directory
        m.execute("mkdir /home/admin/newdir")
        m.execute("touch /home/admin/newdir/newfile")
        b.wait_visible("[data-item='newdir']")
        self.delete_item(b, "directory", "newdir")

        # Deleting protected file should give an error
        m.execute("touch /home/admin/newfile")
        m.execute("sudo chattr +i /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")
        self.delete_item(b, "file", "newfile", expect_success=False)
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Force delete file newfile?")
        self.wait_modal_inline_alert(b, "rm: cannot remove '/home/admin/newfile': Operation not permitted")
        b.click("button.pf-m-danger")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Force delete file newfile?")
        self.wait_modal_inline_alert(b, "rm: cannot remove '/home/admin/newfile': Operation not permitted")
        b.click("div.pf-v5-c-modal-box__close button")
        b.wait_not_present(".pf-v5-c-modal-box")
        b.wait_visible("[data-item='newfile']")
        m.execute("sudo chattr -i /home/admin/newfile")
        self.delete_item(b, "file", "newfile")

    def testCreate(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        # Create folder
        self.create_directory(b, "newdir")
        b.wait_visible("[data-item='newdir']")

        # validation
        b.click("#dropdown-menu")
        b.click("#create-item")
        b.set_input_text("#create-directory-input", "test")
        b.set_input_text("#create-directory-input", "")
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#create-directory-input-helper", "Directory name cannot be empty.")

        b.set_input_text("#create-directory-input", "a" * 256)
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#create-directory-input-helper", "Directory name too long.")
        b.set_input_text("#create-directory-input", "test")
        b.wait_visible("button.pf-m-primary:not(:disabled)")
        b.click(".pf-v5-c-modal-box__footer button.pf-m-link")  # cancel

        # Creating folder with duplicate name should return an error
        self.create_directory(b, "newdir")
        self.wait_modal_inline_alert(b, "mkdir: cannot create directory ‘/home/admin/newdir’: File exists")
        b.click("div.pf-v5-c-modal-box__close button.pf-v5-c-button")

        # Creating folder with empty name should return an error
        self.create_directory(b, "")
        self.wait_modal_inline_alert(b, "mkdir: cannot create directory ‘/home/admin/’: File exists")
        b.click("div.pf-v5-c-modal-box__close button.pf-v5-c-button")

        # Creating folder inside protected folder should return an error
        m.execute("sudo chattr +i /home/admin/newdir")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        self.create_directory(b, "test")
        alert_text = "mkdir: cannot create directory ‘/home/admin/newdir/test’: Operation not permitted"
        self.wait_modal_inline_alert(b, alert_text)
        b.click("div.pf-v5-c-modal-box__close button.pf-v5-c-button")
        b.click(".breadcrumb-button:nth-of-type(3)")
        m.execute("sudo chattr -i /home/admin/newdir")

    def testContextMenu(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        # Create folder from context menu
        b.mouse("#folder-view", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(4) button", "Create directory")
        b.click(".contextMenu button:contains('Create directory')")
        b.set_input_text("#create-directory-input", "newdir")
        b.click("button.pf-m-primary")
        b.wait_visible("[data-item='newdir']")

        # Opening context menu from empty space deselects item
        b.click("[data-item='newdir']")
        b.mouse("#folder-view", "contextmenu")
        b.click(".contextMenu button:contains('Create directory')")
        b.set_input_text("#create-directory-input", "newdir2")
        b.click("button.pf-m-primary")
        b.wait_visible("[data-item='newdir2']")
        m.execute("rmdir /home/admin/newdir2")

        # Rename folder from context menu
        b.mouse("[data-item='newdir']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(5) button", "Rename")
        b.click(".contextMenu button:contains('Rename')")
        b.set_input_text("#rename-item-input", "newdir1")
        b.click("button.pf-m-primary")
        b.wait_visible("[data-item='newdir1']")

        # Edit permissions from context menu
        m.execute("useradd testuser")
        b.click("[data-item='newdir1']")
        b.mouse("[data-item='newdir1']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(4) button", "Edit permissions")
        b.click(".contextMenu button:contains('Edit permissions')")
        b.select_from_dropdown("#edit-permissions-owner", "testuser")
        b.click("button.pf-m-primary")
        b.wait_text("#description-list-owner dd", "testuser")

        # Delete folder from context menu
        b.mouse("[data-item='newdir1']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(9) button", "Delete")
        b.click(".contextMenu button:contains('Delete')")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='newdir1']")

        # Check file name is pre-selected when creating link
        m.execute("touch /home/admin/newfile")
        b.mouse("[data-item='newfile']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(6) button", "Create link")
        b.click(".contextMenu button:contains('Create link')")
        b.wait_val("#create-link-original-wrapper input", "/home/admin/newfile")
        b.click("button.pf-m-link:contains('Cancel')")

        # Delete button text should match item type: directory/file
        b.mouse("[data-item='newfile']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(8) button", "Delete")
        b.click(".contextMenu button:contains('Delete')")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='newfile']")

    def testRename(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        # validation
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.set_input_text("#rename-item-input", "test")
        b.set_input_text("#rename-item-input", "")
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#rename-item-input-helper", "Directory name cannot be empty.")

        b.set_input_text("#rename-item-input", "a" * 256)
        b.wait_visible("button.pf-m-primary:disabled")
        b.wait_in_text("#rename-item-input-helper", "Directory name too long.")
        b.set_input_text("#rename-item-input", "test")
        b.wait_visible("button.pf-m-primary:not(:disabled)")
        b.click(".pf-v5-c-modal-box__footer button.pf-m-link")  # cancel

        # Rename file
        m.execute("touch /home/admin/newfile")
        self.rename_item(b, "newfile", "newfile1")
        b.wait_visible("[data-item='newfile1']")
        m.execute("rm /home/admin/newfile1")

        # Rename directory
        m.execute("mkdir /home/admin/newdir")
        self.rename_item(b, "newdir", "newdir1")
        b.wait_visible("[data-item='newdir1']")

        # Rename with space
        self.rename_item(b, "newdir1", "new dir1")
        b.wait_visible("[data-item='new dir1']")

        # Rename current folder
        b.mouse("[data-item='new dir1']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Rename")
        b.set_input_text("#rename-item-input", "newdir2")
        b.click("button.pf-m-primary")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_text(".last-breadcrumb-button", "newdir2")

        # Go back to home folder
        b.click(".breadcrumb-button:nth-of-type(3)")

        # Renaming protected item should give an error
        m.execute("sudo chattr +i /home/admin/newdir2")
        self.rename_item(b, "newdir2", "testdir")
        alert_text = "mv: cannot move '/home/admin/newdir2' to '/home/admin/testdir': Operation not permitted"
        self.wait_modal_inline_alert(b, alert_text)
        b.click("div.pf-v5-c-modal-box__close")
        m.execute("sudo chattr -i /home/admin/newdir2")

    def testHiddenItems(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        # Check hidden item count
        m.execute("mkdir /home/admin/newdir")
        m.execute("touch /home/admin/newdir/f1 /home/admin/newdir/.f2")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_visible("[data-item='f1']")
        b.wait_not_present("[data-item='.f2']")
        b.wait_in_text("#sidebar-card-header", "2 items (1 hidden)")

        # Show hidden items
        b.click("#global-settings-menu")
        b.click("#show-hidden-items")
        b.wait_visible("[data-item='f1']")
        b.wait_visible("[data-item='.f2']")
        b.wait_in_text("#sidebar-card-header", "2 items")

        # Selected option is saved in localStorage
        b.reload()
        b.enter_page("/navigator")
        b.wait_visible("[data-item='f1']")
        b.wait_visible("[data-item='.f2']")

    def testCreateLink(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        m.execute("touch /home/admin/test")
        m.execute("mkdir /home/admin/testdir")
        m.execute("touch /home/admin/protectedfile")

        # Create file symbolic link
        self.create_link(b, "test", "test-sym", "symbolic", 1)
        b.wait_visible("[data-item='test-sym']")

        def ls_output(filename):
            output = m.execute(f"ls -l {filename}")[0:23]
            return output.strip()

        self.assertRegex(ls_output("/home/admin/test-sym"), "lrwxrwxrwx.* 1 root root")

        # Create file hard link
        self.create_link(b, "test", "test-hard", "hard", 1)
        b.wait_visible("[data-item='test-hard']")
        self.assertRegex(ls_output("/home/admin/test-hard"), "-rw-r--r--.* 2 root root")

        # Create folder symbolic link
        self.create_link(b, "testdir", "testdir-sym", "symbolic", 4)
        b.wait_visible("[data-item='testdir-sym'].directory-item")
        self.assertRegex(ls_output("/home/admin/testdir-sym"), "lrwxrwxrwx.* 1 root root")

        # Creating folder hard link should return an error
        self.create_link(b, "testdir", "testdir-hard", "hard", 5)
        self.wait_modal_inline_alert(b, "ln: /home/admin/: hard link not allowed for directory")

    def testPermissions(self):
        b = self.browser
        m = self.machine

        def wait_permissions(permission):
            b.wait_text("#description-list-owner-permissions dd", permission)
            b.wait_text("#description-list-group-permissions dd", permission)
            b.wait_text("#description-list-other-permissions dd", permission)

        def select_access(access):
            b.select_from_dropdown("#edit-permissions-owner-access", access)
            b.select_from_dropdown("#edit-permissions-group-access", access)
            b.select_from_dropdown("#edit-permissions-other-access", access)

        self.enter_navigator()

        # Check sidebar info
        m.execute("touch /home/admin/newfile")
        b.click("[data-item='newfile']")
        self.assertEqual(m.execute("ls -l /home/admin/newfile")[:10], "-rw-r--r--")
        b.wait_text("#description-list-owner-permissions dd", "Read and write")
        b.wait_text("#description-list-group-permissions dd", "Read-only")
        b.wait_text("#description-list-other-permissions dd", "Read-only")

        # Test changing owner/group
        m.execute("useradd testuser")
        b.click("button:contains('Edit permissions')")
        # Changing owner should change group if user is not in the group
        b.select_from_dropdown("#edit-permissions-owner", "testuser")
        b.wait_in_text("#edit-permissions-group", "testuser")
        b.click("button.pf-m-primary")
        b.wait_text("#description-list-owner dd", "testuser")
        b.wait_text("#description-list-group dd", "testuser")

        m.execute("usermod -a -G testuser admin")
        b.click("button:contains('Edit permissions')")
        # Changing owner shouldn't change group if user is in the group
        b.select_from_dropdown("#edit-permissions-owner", "admin")
        b.wait_in_text("#edit-permissions-group", "testuser")
        b.click("button.pf-m-primary")
        b.wait_text("#description-list-owner dd", "admin")
        b.wait_text("#description-list-group dd", "testuser")

        # Test changing permissions
        b.click("button:contains('Edit permissions')")
        select_access("0")
        b.click("button.pf-m-primary")
        self.assertEqual(m.execute("ls -l /home/admin/newfile")[:10], "----------")
        wait_permissions("None")

        b.click("button:contains('Edit permissions')")
        select_access("7")
        b.click("button.pf-m-primary")
        self.assertEqual(m.execute("ls -l /home/admin/newfile")[:10], "-rwxrwxrwx")
        wait_permissions("Read, write and execute")

    def testErrors(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        m.execute("mkdir /home/admin/testdir && chmod 400 /home/admin/testdir")
        b.mouse("[data-item='testdir']", "dblclick")
        b.wait_not_present(".pf-v5-c-empty-state")
        b.drop_superuser()
        b.wait_in_text(".pf-v5-c-empty-state", "Permission denied")

    def testMultiSelect(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        # Check control-clicking
        m.execute("touch /home/admin/file1 && touch /home/admin/file2")
        b.click("[data-item='file1']")
        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file1'].pf-m-selected")
        b.wait_visible("[data-item='file2'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "admin2 items selected")

        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file1'].pf-m-selected")
        b.wait_not_present("[data-item='file2'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "file1empty")

        b.mouse("[data-item='file1']", "click", ctrlKey=True)
        b.wait_not_present("[data-item='file1'].pf-m-selected")
        b.wait_in_text("#sidebar-card-header", "admin")

        # Control-clicking when nothing is selected should select item normally
        b.mouse("[data-item='file1']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file1'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "file1empty")

        # Check context menu
        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.wait_visible("[data-item='file2'].pf-m-selected")
        b.wait_text("#sidebar-card-header", "admin2 items selected")
        b.mouse("[data-item='file1']", "contextmenu")
        b.wait_in_text(".contextMenu li:nth-child(2) button", "Delete")
        b.click(".contextMenu button:contains('Delete')")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Delete 2 items?")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='file1']")
        b.wait_not_present("[data-item='file2']")

        # Check sidebar menu
        m.execute("touch /home/admin/file1 && touch /home/admin/file2")
        b.click("[data-item='file1']")
        b.mouse("[data-item='file2']", "click", ctrlKey=True)
        b.click("#dropdown-menu")
        b.click("#delete-item")
        b.wait_in_text("h1.pf-v5-c-modal-box__title", "Delete 2 items?")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='file1']")
        b.wait_not_present("[data-item='file2']")

    def testCopyPaste(self):
        b = self.browser
        m = self.machine

        self.enter_navigator()

        # Copy/paste file
        m.execute("""
            mkdir /home/admin/newdir
            echo "test_text" > /home/admin/newfile
            chmod 777 /home/admin/newdir
        """)
        b.click("[data-item='newfile']")
        b.click("#dropdown-menu")
        b.click("#copy-item")
        b.mouse("[data-item='newdir']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#paste-item")
        b.wait_visible("[data-item='newfile']")
        self.assertEqual(m.execute("head -n 1 /home/admin/newdir/newfile"), "test_text\n")
        b.click(".breadcrumb-button:nth-of-type(3)")

        # Copy/paste directory
        self.browser.wait_not_present(".pf-c-empty-state")
        m.execute("mkdir /home/admin/copyDir")
        b.click("[data-item='copyDir']")
        b.click("#dropdown-menu")
        b.click("#copy-item")
        b.mouse("[data-item='newdir']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#paste-item")
        b.wait_visible("[data-item='copyDir']")
        b.click(".breadcrumb-button:nth-of-type(3)")

        # Paste into directory
        self.browser.wait_not_present(".pf-c-empty-state")
        m.execute("touch /home/admin/newfile2")
        b.click("[data-item='newfile2']")
        b.click("#dropdown-menu")
        b.click("#copy-item")
        b.click("[data-item='newdir']")
        b.click("#dropdown-menu")
        b.click("#paste-into-directory")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_visible("[data-item='newfile2']")
        b.click(".breadcrumb-button:nth-of-type(3)")

        # Paste as symlink
        self.browser.wait_not_present(".pf-c-empty-state")
        m.execute("touch /home/admin/newfile3")
        b.click("[data-item='newfile3']")
        b.click("#dropdown-menu")
        b.click("#copy-item")
        b.mouse("[data-item='newdir']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#paste-as-symlink")
        b.wait_visible("[data-item='newfile3']")
        b.click("[data-item='newfile3']")
        b.wait_text("#sidebar-card-header", "newfile3symbolic link to /home/admin/newfile3")
        b.click(".breadcrumb-button:nth-of-type(3)")

        # Check error alerts
        b.click("#navigator-card-body")  # unselect
        b.click("#dropdown-menu")
        b.click("#paste-item")
        b.wait_in_text("h4.pf-v5-c-alert__title",
                       "'/home/admin/newfile3' and '/home/admin/newfile3' are the same file")
        b.click("div.pf-v5-c-alert__action button")
        m.execute("mkdir /home/admin/locked && chattr +i /home/admin/locked")
        b.mouse("[data-item='locked']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#paste-item")
        b.wait_in_text("h4.pf-v5-c-alert__title",
                       "cannot create regular file '/home/admin/locked/newfile3': Operation not permitted")
        b.click(".breadcrumb-button:nth-of-type(3)")
        m.execute("chattr -i /home/admin/locked")


if __name__ == '__main__':
    testlib.test_main()
