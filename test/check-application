#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/main/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib

# Nondestructive tests all run in the same running VM. This allows them to run in Packit, Fedora, and RHEL dist-git gating
# They must not permanently change any file or configuration on the system in a way that influences other tests.
@testlib.nondestructive
class TestNavigator(testlib.MachineCase):
    @classmethod
    def setUpClass(cls):
        # Run browser in UTC as the displayed time is in the browser's timezone
        os.environ['TZ'] = 'UTC'

    # FIXME: Move to testlib.py
    def select_PF5(self, b, selector_button: str, selector: str, value):
        b.click(f"{selector_button}:not([disabled]):not([aria-disabled=true])")
        select_entry = f"{selector} ul button:contains('{value}')"
        b.click(select_entry)

    def delete_item(self, b, type, filename):
        b.click(f"[data-item='{filename}']")
        b.click("#dropdown-menu")
        b.click("#delete-item")
        b.wait_in_text("h1.pf-c-modal-box__title", f"Delete {type} {filename}?")
        b.click("button.pf-m-danger")

    def create_directory(self, b, filename):
        b.click("#dropdown-menu")
        b.click("#create-item")
        b.set_input_text("#create-directory-input", f"{filename}")
        b.click("button.pf-m-primary")

    def wait_modal_inline_alert(self, b, msg):
        b.wait_in_text("h4.pf-c-alert__title", msg)

    def rename_item(self, b, type, itemname, newname):
        b.click(f"[data-item='{itemname}']")
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.wait_in_text("h1.pf-c-modal-box__title", f"Rename {type}")
        b.set_input_text("#rename-item-input", f"{newname}")
        b.click("button.pf-m-primary")

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")
        # expected heading
        b.wait_text("#navigator-card-header", "Directories & files")
        files_cnt = m.execute("ls -A /home/admin | wc -l").strip()
        hidden_files_cnt = m.execute('ls -A /home/admin | grep "^\." | wc -l').strip()
        b.wait_text("#sidebar-card-header", f"admin{files_cnt} items ({hidden_files_cnt} hidden)")

        # new files are auto-detected
        m.execute("touch --date @1641038400 /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")

        # new directories are auto-detected
        m.execute("mkdir /home/admin/newdir; touch --date @1641038400 /home/admin/newfile /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")

        # hidden files are not displayed
        m.execute("touch /home/admin/.hiddenfile /home/admin/not-hidden")
        b.wait_visible("[data-item='not-hidden']")
        b.wait_not_present("[data-item='.hiddenfile']")

        # file sidebar information
        b.click("button:contains('newfile')")
        b.wait_text("#sidebar-card-header", "newfile")
        b.wait_text("#description-list-owner dd", "root")
        b.wait_text("#description-list-group dd", "root")
        b.wait_text("#description-list-size dd", "0 B")
        b.wait_text("#description-list-last-modified dd", "Jan 1, 2022, 12:00 PM")

        # saving a file updates sidebar info
        # FIXME: Size does not update
        m.execute("head -c 7 /dev/zero > /home/admin/newfile")
        b.wait_text("#description-list-size dd", "7 B")
        b.wait_not_in_text("#description-list-last-modified ", "Jan 1, 2022, 12:00 PM")
        m.execute("touch --date @1641038400 /home/admin/newfile")
        b.wait_in_text("#description-list-last-modified ", "Jan 1, 2022, 12:00 PM")

        # clicking empty space resets sidebar
        b.click("#folder-view")
        b.wait_in_text("#sidebar-card-header", "admin")

        # folder information doesn't contain size
        b.click("button:contains('newdir')")
        b.wait_text("#sidebar-card-header", "newdir")
        b.wait_text("#description-list-owner dd", "root")
        b.wait_text("#description-list-group dd", "root")
        b.wait_not_present("#description-list-size")
        b.wait_text("#description-list-last-modified dd", "Jan 1, 2022, 12:00 PM")

        # filtering works
        self.browser.wait_js_cond("ph_count('#folder-view > button') > 1")
        b.set_input_text("input[placeholder='Filter directory']", "newfile")
        self.browser.wait_js_cond("ph_count('#folder-view > button') == 1")

        # filtering persists when changing view
        b.click("button[aria-label='Display as a list']")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') == 1")
        b.set_input_text("input[placeholder='Filter directory']", "")
        self.browser.wait_js_cond("ph_count('#folder-view tbody tr') > 1")

        # deleted files and directories are auto-detected
        m.execute("rmdir /home/admin/newdir")
        m.execute("rm /home/admin/newfile")
        b.wait_not_present("[data-item='newdir']")
        b.wait_not_present("[data-item='newfile']")

        # current directory sidebar item count is updated
        files_cnt = m.execute("ls -A /home/admin | wc -l").strip()
        hidden_files_cnt = m.execute('ls -A /home/admin | grep "^\." | wc -l').strip()
        b.wait_text("#sidebar-card-header", f"admin{files_cnt} items ({hidden_files_cnt} hidden)")

        # sidebar is reset when files are removed
        b.wait_in_text("#sidebar-card-header", "admin")

    def testNavigation(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")

        b.wait_text(".breadcrumb-button:nth-of-type(1)", "/")
        b.wait_text(".breadcrumb-button:nth-of-type(2)", "home")
        b.wait_text(".last-breadcrumb-button", "admin")

        # clicking on the home button should take us to the home directory
        b.click(".breadcrumb-button:nth-of-type(2)")
        b.wait_not_present(".breadcrumb-button:nth-of-type(2)")
        b.wait_text(".last-breadcrumb-button", "home")
        b.wait_visible("[data-item='admin']")

        # show folder info in sidebar
        b.click("button:contains('admin')")
        b.wait_in_text("#sidebar-card-header", "admin")

        # double-clicking on a directory should take us into it
        b.mouse("[data-item='admin']", "dblclick")
        b.wait_not_present("[data-item='admin']")
        b.wait_text(".last-breadcrumb-button", "admin")

        # navigating into a directory resets the sidebar
        b.wait_in_text("#sidebar-card-header", "admin")

        # create folders and test navigation history buttons
        m.execute("mkdir /home/admin/newdir")
        m.execute("mkdir /home/admin/newdir/newdir2")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='admin']")
        b.wait_visible("[data-item='newdir2']")
        b.mouse("[data-item='newdir2']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        b.click(".breadcrumb-button:nth-of-type(2)")
        b.wait_text(".last-breadcrumb-button", "home")
        b.wait_visible("[data-item='admin']")
        # navigate back
        b.click("#navigate-back")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_not_present("[data-item='admin']")
        b.click("#navigate-back")
        b.wait_in_text("#sidebar-card-header", "newdir")
        b.wait_visible("[data-item='newdir2']")
        b.click("#navigate-back")
        b.wait_in_text("#sidebar-card-header", "admin")
        b.wait_visible("[data-item='newdir']")
        # navigate forward
        b.click("#navigate-forward")
        b.wait_in_text("#sidebar-card-header", "newdir")
        b.wait_not_present("[data-item='admin']")
        b.wait_text(".last-breadcrumb-button", "newdir")
        b.click("#navigate-forward")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_not_present("[data-item='newdir']")
        b.wait_text(".last-breadcrumb-button", "newdir2")
        b.click("#navigate-forward")
        b.wait_in_text("#sidebar-card-header", "home")
        b.wait_not_present("[data-item='newdir']")
        b.wait_text(".last-breadcrumb-button", "home")
        b.wait_visible("[data-item='admin']")

    def testSorting(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")

        # Expected heading
        b.wait_text("#navigator-card-header", "Directories & files")

        # Create test files and folders
        m.execute("touch -d '3 hours ago' /home/admin/aaa")
        b.wait_visible("[data-item='aaa']")
        m.execute("touch -d '4 hours ago' /home/admin/BBB")
        b.wait_visible("[data-item='BBB']")
        m.execute("touch -d '2 hours ago' /home/admin/ccc")
        b.wait_visible("[data-item='ccc']")

        # Default sort is A-Z
        # Alphabet sorts should be case insensetive
        b.wait_text(".item-button:nth-of-type(1)", "aaa")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "ccc")

        # Sort by reverse alphabet
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "Z-A")
        # Alphabet sorts should be case insensetive
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

        # Sort by last modified
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "Last modified")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "aaa")
        b.wait_text(".item-button:nth-of-type(3)", "BBB")

        # Update content of files
        m.execute('echo "update" > /home/admin/aaa')

        b.wait_text(".item-button:nth-of-type(1)", "aaa")
        b.wait_text(".item-button:nth-of-type(2)", "ccc")
        b.wait_text(".item-button:nth-of-type(3)", "BBB")

        # Sort by first modified
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "First modified")
        b.wait_text(".item-button:nth-of-type(1)", "BBB")
        b.wait_text(".item-button:nth-of-type(2)", "ccc")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

        # Sort option should be saved in localStorage
        self.select_PF5(b, "#sort-menu-toggle", "#sort-menu", "Z-A")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")
        b.reload()
        b.enter_page("/navigator")
        b.wait_text(".item-button:nth-of-type(1)", "ccc")
        b.wait_text(".item-button:nth-of-type(2)", "BBB")
        b.wait_text(".item-button:nth-of-type(3)", "aaa")

    def testDelete(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")

        self.allow_journal_messages("rm: cannot remove '/home/admin/newdir/newfile': Permission denied",
                                    "rm: cannot remove '/home/admin/newfile': Operation not permitted")

        # Delete file
        m.execute("touch /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")
        self.delete_item(b, "file", "newfile")
        b.wait_not_present("[data-item='newfile']")

        # Delete file with space in the file name
        m.execute("touch /home/admin/new\ file")
        b.wait_visible("[data-item='new file']")
        self.delete_item(b, "file", "new file")
        b.wait_not_present("[data-item='new file']")

        # Delete empty directory
        m.execute("mkdir /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")
        self.delete_item(b, "directory", "newdir")
        b.wait_not_present("[data-item='newdir']")

        # Delete full directory
        m.execute("mkdir /home/admin/newdir")
        m.execute("touch /home/admin/newdir/newfile")
        b.wait_visible("[data-item='newdir']")
        self.delete_item(b, "directory", "newdir")
        b.wait_not_present("[data-item='newdir']")

        # Deleting protected file should give an error
        m.execute("touch /home/admin/newfile")
        m.execute("sudo chattr +i /home/admin/newfile")
        b.wait_visible("[data-item='newfile']")
        self.delete_item(b, "file", "newfile")
        b.wait_in_text("h1.pf-c-modal-box__title", "Force delete file newfile?")
        self.wait_modal_inline_alert(b, "rm: cannot remove '/home/admin/newfile': Operation not permitted")
        b.click("button.pf-m-danger")
        b.wait_in_text("h1.pf-c-modal-box__title", "Force delete file newfile?")
        self.wait_modal_inline_alert(b, "rm: cannot remove '/home/admin/newfile': Operation not permitted")
        b.click("div.pf-c-modal-box__close")
        b.wait_visible("[data-item='newfile']")
        m.execute("sudo chattr -i /home/admin/newfile")
        self.delete_item(b, "file", "newfile")
        b.wait_not_present("[data-item='newfile']")

        # Delete current directory
        m.execute("mkdir /home/admin/newdir")
        b.wait_visible("[data-item='newdir']")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        b.click("#dropdown-menu")
        b.click("#delete-item")
        b.wait_in_text("h1.pf-c-modal-box__title", "Delete directory newdir?")
        b.click("button.pf-m-danger")
        b.wait_text(".last-breadcrumb-button", "admin")
        b.wait_in_text("#sidebar-card-header", "admin")
        b.wait_not_present("[data-item='newdir']")

    def testCreate(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")

        # Create folder
        self.create_directory(b, "newdir")
        b.wait_visible("[data-item='newdir']")

        # Creating folder with duplicate name should return an error
        self.create_directory(b, "newdir")
        self.wait_modal_inline_alert(b, "mkdir: cannot create directory ‘/home/admin/newdir’: File exists")
        b.click("div.pf-c-modal-box__close")
        
        # Creating folder with empty name should return an error
        self.create_directory(b, "")
        self.wait_modal_inline_alert(b, "mkdir: cannot create directory ‘/home/admin/’: File exists")
        b.click("div.pf-c-modal-box__close")
        
        # Creating folder inside protected folder should return an error
        m.execute("sudo chattr +i /home/admin/newdir")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        self.create_directory(b, "test")
        self.wait_modal_inline_alert(b, "mkdir: cannot create directory ‘/home/admin/newdir/test’: Operation not permitted")
        b.click("div.pf-c-modal-box__close")
        b.click(".breadcrumb-button:nth-of-type(3)")
        m.execute("sudo chattr -i /home/admin/newdir")

        # Create folder inside selected folder
        b.click("[data-item='newdir']")
        self.create_directory(b, "nesteddir")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_visible("[data-item='nesteddir']")

    def testContextMenu(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")

        # Create folder from context menu
        b.mouse("#folder-view", "contextmenu")
        b.wait_in_text(".context-menu button", "Create directory")
        b.click(".context-menu button:contains('Create directory')")
        b.set_input_text("#create-directory-input", "newdir")
        b.click("button.pf-m-primary")        
        b.wait_visible("[data-item='newdir']")

        # Create folder inside selected folder
        b.mouse("[data-item='newdir']", "contextmenu")
        b.click(".context-menu button:contains('Create directory')")
        b.set_input_text("#create-directory-input", "newdir2")
        b.click("button.pf-m-primary")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_not_present("[data-item='newdir']")
        b.wait_visible("[data-item='newdir2']")
        b.click(".breadcrumb-button:nth-of-type(3)")

        # Opening context menu from empty space deselects item
        b.click("[data-item='newdir']")
        b.mouse("#folder-view", "contextmenu")
        b.click(".context-menu button:contains('Create directory')")
        b.set_input_text("#create-directory-input", "newdir2")
        b.click("button.pf-m-primary")        
        b.wait_visible("[data-item='newdir2']")
        m.execute("rmdir /home/admin/newdir2")

        # Rename folder from context menu
        b.mouse("[data-item='newdir']", "contextmenu")
        b.wait_in_text(".context-menu li:nth-child(2) button", "Rename directory")
        b.click(".context-menu button:contains('Rename directory')")
        b.set_input_text("#rename-item-input", "newdir1")
        b.click("button.pf-m-primary")
        b.wait_visible("[data-item='newdir1']")

        # Delete folder from context menu
        b.mouse("[data-item='newdir1']", "contextmenu")
        b.wait_in_text(".context-menu li:nth-child(3) button", "Delete directory")
        b.click(".context-menu button:contains('Delete directory')")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='newdir1']")

        # Delete button text should match item type: directory/file
        m.execute("touch /home/admin/newfile")
        b.mouse("[data-item='newfile']", "contextmenu")
        b.wait_in_text(".context-menu li:nth-child(3) button", "Delete file")
        b.click(".context-menu button:contains('Delete file')")
        b.click("button.pf-m-danger")
        b.wait_not_present("[data-item='newfile']")

    def testRename(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")

        # Rename file
        m.execute("touch /home/admin/newfile")
        self.rename_item(b, "file", "newfile", "newfile1")
        b.wait_visible("[data-item='newfile1']")
        m.execute("rm /home/admin/newfile1")

        # Rename directory
        m.execute("mkdir /home/admin/newdir")
        self.rename_item(b, "directory", "newdir", "newdir1")
        b.wait_visible("[data-item='newdir1']")

        # Rename with space
        self.rename_item(b, "directory", "newdir1", "new dir1")
        b.wait_visible("[data-item='new dir1']")

        # Rename current folder
        b.mouse("[data-item='new dir1']", "dblclick")
        b.click("#dropdown-menu")
        b.click("#rename-item")
        b.wait_in_text("h1.pf-c-modal-box__title", "Rename directory")
        b.set_input_text("#rename-item-input", "newdir2")
        b.click("button.pf-m-primary")
        b.wait_in_text("#sidebar-card-header", "newdir2")
        b.wait_text(".last-breadcrumb-button", "newdir2")
        
        # Go back to home folder
        b.click(".breadcrumb-button:nth-of-type(3)")

        # Renaming protected item should give an error
        m.execute("sudo chattr +i /home/admin/newdir2")
        self.rename_item(b, "directory", "newdir2", "testdir")
        self.wait_modal_inline_alert(b, "mv: cannot move '/home/admin/newdir2' to '/home/admin/testdir': Operation not permitted")
        b.click("div.pf-c-modal-box__close")
        m.execute("sudo chattr -i /home/admin/newdir2")

    def testHiddenItems(self):
        b = self.browser
        m = self.machine

        self.restore_dir("/home/admin")

        self.login_and_go("/navigator")

        # Check hidden item count
        m.execute("mkdir /home/admin/newdir")
        m.execute("touch /home/admin/newdir/f1 /home/admin/newdir/.f2")
        b.mouse("[data-item='newdir']", "dblclick")
        b.wait_visible("[data-item='f1']")
        b.wait_not_present("[data-item='.f2']")
        b.wait_in_text("#sidebar-card-header", "2 items (1 hidden)")

        # Show hidden items
        b.click("#dropdown-menu")
        b.click("#show-hidden-items")
        b.wait_visible("[data-item='f1']")
        b.wait_visible("[data-item='.f2']")

        # Button shouldn't be visible when a file is selected
        b.click("[data-item='f1']")
        b.click("#dropdown-menu")
        b.wait_not_present("#show-hidden-items")

if __name__ == '__main__':
    testlib.test_main()
